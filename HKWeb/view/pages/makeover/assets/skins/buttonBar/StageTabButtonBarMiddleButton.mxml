<?xml version="1.0" encoding="utf-8"?> 
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
			 xmlns:s="library://ns.adobe.com/flex/spark" 
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
			 minWidth="21" minHeight="35" 
			 alpha.disabledStates="0.5" creationComplete="onComplete(event)" currentStateChange="onStateChange(event)">
	<fx:Metadata>
		<![CDATA[ 
		[HostComponent("spark.components.ButtonBarButton")]
		]]>
	</fx:Metadata>
	<fx:Script fb:purpose="styling">
        
		 
		static private const exclusions:Array = ["labelDisplay","slash"];
		
		override public function get colorizeExclusions():Array {return exclusions;}
		
		override protected function initializationComplete():void
		{
			hostComponent.buttonMode = true;
			useChromeColor = true;
			super.initializationComplete();
		}
		private var cornerRadius:Number = 2;
	</fx:Script>
	<fx:Script>
		<![CDATA[
			[Embed(source = "assets/img/downArrow.png")]
			[Bindable]
			public var downArrow:Class;
			[Embed(source = "assets/img/upArrow.png")]
			[Bindable]
			public var upArrow:Class;
			[Embed(source = "assets/img/upWhiteArrow.png")]
			[Bindable]
			public var upWhiteArrow:Class;
			
			import mx.events.StateChangeEvent;
			
			import mx.events.FlexEvent;
			
			protected function onComplete(event:FlexEvent):void
			{
				if(hostComponent.data.style == "normal"){
					if(hostComponent.selected){
						bitmapImg.source = downArrow;						
					}else{
						bitmapImg.source = null;
					}
				}else{
					if(hostComponent.selected){
						bitmapImg.source = upArrow;						
					}else{
						bitmapImg.source = upWhiteArrow;
					}
				}
				
			}
			 protected function onStateChange(event:StateChangeEvent):void{
				 if(hostComponent.data.style == "normal"){
					 if(hostComponent.selected){
						 bitmapImg.source = downArrow;						
					 }else{
						 bitmapImg.source = null;
					 }
				 }
			} 
		]]>
	</fx:Script>
	<s:states>
		<s:State name="up" />
		<s:State name="over" stateGroups="overStates" />
		<s:State name="down" stateGroups="downStates" />
		<s:State name="disabled" stateGroups="disabledStates" />
		<s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
		<s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
		<s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
		<s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
	</s:states>
	<s:Rect left="0" right="0" top="0" bottom="0"  radiusX="2"  >
		<s:fill>
			<s:SolidColor 
				color.over="#7d7d7d" 
				color="#000000"
				color.selectedStates="#e5e5e5"
				alpha.over="1"
				alpha.selectedStates="1"
				alpha = ".7"/>
		</s:fill>
	</s:Rect>
	<s:BitmapImage id="bitmapImg" verticalCenter="0" right="10"/>
	<!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
	<s:Label id="labelDisplay" verticalCenter="0" horizontalCenter="0" paddingLeft="12" paddingRight="27" 
			 styleName="headerButtonBarLabel" color.overStates="#ffffff" color.selectedStates="#000000"/>
</s:SparkSkin>