package com.hk.impl.service.mooga;

import com.hk.pact.service.mooga.RecommendationEngine;
import org.apache.commons.lang.StringUtils;
import com.hk.domain.catalog.product.ProductVariant;
import com.hk.pact.service.mooga.MoogaWebServicesLocator;
import com.hk.pact.service.mooga.MoogaWebServicesSoap_PortType;
import org.springframework.stereotype.Service;

import javax.xml.rpc.ServiceException;
import java.rmi.*;
import java.util.*;

/**
 * Created by IntelliJ IDEA.
 * User: Marut
 * Date: 6/23/12
 * Time: 11:18 AM
 * To change this template use File | Settings | File Templates.
 */
@Service
public class RecommendationEngineImpl implements RecommendationEngine {
    private final int HK_MOOGA_KEY = 11213141;   //Key provided by MOOGA
    private final String MOOGA_SEPARATOR = "=";
    private final String LEFT_OPERATOR = "[";
    private final String RIGHT_OPERATOR = "]";


    MoogaWebServicesLocator servicesLocator;    //Service locator wrapper for mooga..generated by Apache Axis
    MoogaWebServicesSoap_PortType moogaStub;   //Mooga wrapper generated by Apache Axis

    /**
     * This inner class does not access any instance member sp according to Joshua Bloch it is better to make it static
     */
    static class ProductResult implements Comparable<ProductResult>{
        public String name;
        public double rank;

        public ProductResult(String name, double  rank){
            this.name = name;
            this.rank = rank;
        }
        //Must to define otherwise its parent class can not be autowired
        public ProductResult(){

        }

        @Override
        public int compareTo(ProductResult other){
           return Double.valueOf(this.rank).compareTo(other.rank);
        }

        @Override
        public boolean equals(Object o){
           if (o instanceof ProductResult){
               return ((ProductResult)o).equals(this.name);
           }
           return  false;
        }

        @Override
        public int hashCode(){
            return name.hashCode();
        }
    }

    public RecommendationEngineImpl(){
        try{
            servicesLocator = new MoogaWebServicesLocator();
            moogaStub = servicesLocator.getMoogaWebServicesSoap12();
        }catch (ServiceException ex)  {

        }
    }


    public void pushAddToCart(long userId, List<ProductVariant> productVariants){
        for (ProductVariant pv : productVariants){
            pushAddToCart(userId, pv.getId());
        }
    }

    /**
     * pushes the add to cart action to MOOGA store
     * @param userId
     * @param productVariantId
     */
    public void pushAddToCart(long userId, String productVariantId){

        try{
            String params = String.format("%s, %s, %s, %d, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s",
                    "1","0","Consumer/Add to cart",userId, productVariantId, "IT",
                    "0","0","0","0","0","0","0","0");

            String result = moogaStub.trans_NotifyTrans(HK_MOOGA_KEY,"OFBiz.NotifyTransaction",params);
            result = "";
        }catch(RemoteException ex){
            String err = ex.getMessage();
            err = "";
        }
    }

    /**
     * returns the recommended products for given product Id
     * @param pId
     * @return
     */
    public List<String> getRecommendedProducts(String pId){
        List<String> recommendedItems = new ArrayList<String>();
        try{
            String itemResponse = moogaStub.item_GetRecommendedItemsToItem(HK_MOOGA_KEY, pId, "0","0","PRODUCT");
            recommendedItems = getProducts(itemResponse);
        }catch(RemoteException ex){

        }
        return  recommendedItems;
    }

    /**
     * returns the recommended product variants for given product variant id
     * @param pvId
     * @return
     */
    public List<String> getRecommendedProductVariants(String pvId){
        List<String> recommendedItems = new ArrayList<String>();
        try{
            String itemResponse = moogaStub.item_GetRecommendedItemsToItem(HK_MOOGA_KEY, pvId, "0","0","");
            recommendedItems = getProducts(itemResponse);
        }catch(RemoteException ex){

        }
        return  recommendedItems;
    }

    private List<String> getProducts(String itemResponse){

        List<String> recommendedItemsList = new ArrayList<String>();
        try{
        //MOOGA sends duplicate products sometimes..OOPS
        Set<ProductResult> productResults = new TreeSet<ProductResult>();
        //Go Ahead only if there is no error from MOOGA
        if (!itemResponse.contains("ERR")){
            String[] moogaResult = itemResponse.split(",");

            for (String result : moogaResult){
                String[] splitResults = result.split(MOOGA_SEPARATOR);
                String productId = splitResults[0].replace(LEFT_OPERATOR,"").replace(RIGHT_OPERATOR, "").trim();
                Double rank =  Double.parseDouble(splitResults[1].replace(LEFT_OPERATOR, "").replace(RIGHT_OPERATOR, "").trim());
                if ((splitResults.length > 0) && StringUtils.isNotBlank(productId)){ //Just in case MOOGA misbehaves
                    productResults.add(new ProductResult(productId,rank));
                }
            }
        }

        for (ProductResult pr : productResults){
            recommendedItemsList.add(pr.name);
        }
        }catch (Exception ex){  //WALL : Suppress any exception coming from MOOGA API just in case

        }
        return  recommendedItemsList;
    }
}
