<project name="HealthKart" basedir="." default="build">

	<property file="build.properties" />
	<property file="environmentLocator.properties" />
	<property file="${project.common.dir}/resources/${project.env}/setup/setup.properties" />

	<path id="compile.classpath">
		<fileset dir="${lib.root.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${lib.dependencies.dir}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement path="${classpath}" />
	</path>

	<taskdef resource="liquibasetasks.properties">
		<classpath refid="compile.classpath" />
	</taskdef>

	<!-- Remove classes directory for clean build -->
	<target name="clean" description="Prepare for clean build">
		<delete dir="${package.target.dir}" />
		<delete dir="${project.dist.dir}" />
		<ant dir="${project.web.dir}" target="clean" inheritall="false" />
		<ant dir="${project.admin.core.dir}" target="clean" inheritall="false" />
		<ant dir="${project.report.dir}" target="clean" inheritall="false" />
		<ant dir="${project.core.dir}" target="clean" inheritall="false" />
		<ant dir="${project.common.dir}" target="clean" inheritall="false" />
        <ant dir="${project.api.dir}" target="clean" inheritall="false"/>

		<!--
		
		<ant dir="${project.admin.web.dir}" target="clean" inheritall="false" />
		
		-->
	</target>


	<target name="build.common.jar" description="Create binary distribution">
		<ant dir="${project.common.dir}" target="build" inheritall="false">
			<property name="build.env" value="${build.env}" />
		</ant>
	</target>

	<target name="collect-resources">
		<copy todir="${project.dist.dir}/WEB-INF/classes/spring">
			<fileset dir="${project.common.dir}/resources/${project.env}/spring" />
		</copy>
		<replace file="${project.dist.dir}/WEB-INF/classes/spring/spring-hibernate.xml" token="DB_SERVER" value="${DB_SERVER}" />
		<replace file="${project.dist.dir}/WEB-INF/classes/spring/spring-hibernate.xml" token="DB_PORT" value="${DB_PORT}" />
		<replace file="${project.dist.dir}/WEB-INF/classes/spring/spring-hibernate.xml" token="DB_NAME" value="${DB_NAME}" />
		<replace file="${project.dist.dir}/WEB-INF/classes/spring/spring-hibernate.xml" token="DB_USERID" value="${DB_USERID}" />
		<replace file="${project.dist.dir}/WEB-INF/classes/spring/spring-hibernate.xml" token="DB_PASSWD" value="${DB_PASSWD}" />

        <replace file="${project.dist.dir}/WEB-INF/environment.properties" token="DB_SERVER" value="${DB_SERVER}" />
        <replace file="${project.dist.dir}/WEB-INF/environment.properties" token="DB_PORT" value="${DB_PORT}" />
        <replace file="${project.dist.dir}/WEB-INF/environment.properties" token="DB_NAME" value="${DB_NAME}" />
        <replace file="${project.dist.dir}/WEB-INF/environment.properties" token="DB_USERID" value="${DB_USERID}" />
        <replace file="${project.dist.dir}/WEB-INF/environment.properties" token="DB_PASSWD" value="${DB_PASSWD}" />

		<copy todir="${project.dist.dir}/WEB-INF/classes">
			<fileset file="${project.web.dir}/resources/${project.env}/WEB-INF/StripesResources.properties" />
			<fileset file="${project.web.dir}/resources/${project.env}/WEB-INF/healthkartTagLib.tld" />
		</copy>
		<!-- <copy todir="${project.dist.dir}/WEB-INF/classes/spring">
			<fileset dir="${project.web.dir}/resources/spring" />
		</copy> -->
		<copy todir="${project.dist.dir}/WEB-INF/classes">
			<fileset dir="${project.common.dir}/resources/${project.env}/logging" />
		</copy>
		<copy todir="${project.dist.dir}/WEB-INF">
			<fileset dir="${project.common.dir}/resources/${project.env}/payment" />
		</copy>
		<copy todir="${project.dist.dir}/WEB-INF/lib">
			<fileset dir="${lib.barcode.root}">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${project.dist.dir}/WEB-INF/lib">
			<fileset dir="${lib.commons.root}">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${project.dist.dir}/WEB-INF/lib">
			<fileset dir="${lib.facebook.root}">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${project.dist.dir}/WEB-INF/lib">
			<fileset dir="${lib.freemarker.root}">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${project.dist.dir}/WEB-INF/lib">
			<fileset dir="${lib.hibernate.root}">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${project.dist.dir}/WEB-INF/lib">
			<fileset dir="${lib.http.root}">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${project.dist.dir}/WEB-INF/lib">
			<fileset dir="${lib.itext.root}">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${project.dist.dir}/WEB-INF/lib">
			<fileset dir="${lib.json.root}">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${project.dist.dir}/WEB-INF/lib">
			<fileset dir="${lib.logger.root}">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${project.dist.dir}/WEB-INF/lib">
			<fileset dir="${lib.mysql.root}">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${project.dist.dir}/WEB-INF/lib">
			<fileset dir="${lib.rest.root}">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${project.dist.dir}/WEB-INF/lib">
			<fileset dir="${lib.solr.root}">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${project.dist.dir}/WEB-INF/lib">
			<fileset dir="${lib.spring.root}">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${project.dist.dir}/WEB-INF/lib">
			<fileset dir="${lib.stripes.root}">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${project.dist.dir}/WEB-INF/lib">
			<fileset dir="${lib.citrus.root}">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${project.dist.dir}/WEB-INF/lib">
			<fileset dir="${lib.thirdParty.root}">
				<include name="*.jar" />
			</fileset>
		</copy>
        <copy todir="${project.dist.dir}/WEB-INF/lib">
            <fileset dir="${lib.icici.root}">
                <include name="*.jar" />
            </fileset>
        </copy>
		<copy todir="${project.dist.dir}/WEB-INF/lib">
			<fileset dir="${lib.xml.root}">
				<include name="*.jar" />
			</fileset>
		</copy>

        <copy todir="${project.dist.dir}/WEB-INF/lib">
			<fileset dir="${lib.fedex.root}">
				<include name="*.jar" />
			</fileset>
		</copy>

        <copy todir="${project.dist.dir}/WEB-INF/lib">
            <fileset dir="${lib.axis.root}">
                <include name="*.jar" />
            </fileset>
        </copy>
		<copy file="${project.web.dir}/resources/${project.env}/WEB-INF/robots.txt" tofile="${project.dist.dir}/robots.txt" failonerror="false" overwrite="true" />
	</target>

	<target name="collect-jar">
		<mkdir dir="${project.dist.dir}/WEB-INF/lib" />
		<copy todir="${project.dist.dir}/WEB-INF/lib" file="${project.common.dir}/dist/hk-common.jar" />
		<copy todir="${project.dist.dir}/WEB-INF/lib" file="${project.core.dir}/dist/hk-core.jar" />
		<copy todir="${project.dist.dir}/WEB-INF/lib" file="${project.admin.core.dir}/dist/hk-admin-core.jar" />
		<copy todir="${project.dist.dir}/WEB-INF/lib" file="${project.report.dir}/dist/hk-report.jar" />
        <copy todir="${project.dist.dir}/WEB-INF/lib" file="${project.api.dir}/dist/hk-api.jar" />
	</target>

	<target name="collect-web">
		<copy todir="${project.dist.dir}">
			<fileset dir="${project.web.dir}/${project.view.dir}">
				<include name="**/**" />
			</fileset>
		</copy>
		<copy todir="${project.dist.dir}/WEB-INF/classes">
			<fileset dir="${project.web.dir}/${package.target.dir}" excludes="test/**/**" />
		</copy>
		<copy todir="${project.dist.dir}/WEB-INF/">
			<fileset dir="${project.web.dir}/${project.resources.dir}/${project.env}/WEB-INF" excludes="test/**/**" />
		</copy>
	</target>

	<target name="web" depends="compress">
		<copy todir="${project.dist.dir}">
			<fileset dir="${project.web.dir}/${project.view.dir}" />
		</copy>
	</target>

	<target name="build" depends="build-dependencies,collect-web,collect-jar,collect-resources">
		<!--<war destfile="${dist.root}/${app.name}.war" webxml="${dist.war.root}/WEB-INF/web.xml">
			<fileset dir="${dist.war.root}" />
		</war>-->
	</target>

	<!-- Create binary distribution for production-->
	<target name="build-dependencies" depends="prepare,build.common.jar" description="Create binary distribution">

		<ant dir="${project.core.dir}" target="build" inheritall="false">
			<property name="build.env" value="${build.env}" />
		</ant>
		<!--<ant dir="${project.web.dir}" target="build" inheritall="false">
			<property name="build.env" value="${build.env}" />
		</ant>-->
		<ant dir="${project.admin.core.dir}" target="build" inheritall="false">
			<property name="build.env" value="${build.env}" />
		</ant>
		<!-- <ant dir="${project.admin.web.dir}" target="build" inheritall="false">
			<property name="build.env" value="${build.env}" />
		</ant> -->
		<ant dir="${project.report.dir}" target="build" inheritall="false">
			<property name="build.env" value="${build.env}" />
		</ant>

		<ant dir="${project.web.dir}" target="build" inheritall="false">
			<property name="build.env" value="${build.env}" />
		</ant>

        <ant dir="${project.api.dir}" target="build" inheritall="false">
            <property name="build.env" value="${build.env}" />
        </ant>
	</target>


	<!-- Check timestamp on files -->
	<target name="prepare">
		<mkdir dir="${package.target.dir}" />
		<mkdir dir="${project.dist.dir}" />
		<mkdir dir="${project.dist.dir}/WEB-INF" />
		<mkdir dir="${project.dist.dir}/WEB-INF/classes" />
		<mkdir dir="${project.dist.dir}/WEB-INF/classes/spring" />
		<ant dir="${project.common.dir}" target="prepare" inheritall="false" />
		<ant dir="${project.core.dir}" target="prepare" inheritall="false" />
		<ant dir="${project.admin.core.dir}" target="prepare" inheritall="false" />
		<ant dir="${project.report.dir}" target="prepare" inheritall="false" />
        <ant dir="${project.api.dir}" target="prepare" inheritall="false" />
		<!--<ant dir="${project.web.dir}" target="prepare" inheritall="false" />-->
		<tstamp />
	</target>

    <!-- YUI Compressor to Compress CSS and JS files -->

	<!-- defines temp output directory -->
	<property name="temp.dir" value="temp" />

	<!-- output files, one for JS one for CSS -->
	<property name="final_js" value="${project.dist.dir}/static/js/hk-min.js" />
	<property name="final_css" value="${project.dist.dir}/static/css/hk-min.css" />

	<!-- adds libraries to the classpath -->
	<path id="yui.classpath">
		<pathelement location="${lib.root.dir}/yui-compressor/yuicompressor-2.4.2.jar" />
		<pathelement location="${lib.root.dir}/yui-compressor/yui-compressor-ant-task-0.5.jar" />
	</path>

	<!-- define tasks -->
	<taskdef name="yui-compressor" classname="net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask">
		<classpath refid="yui.classpath" />
	</taskdef>
    
    <!-- targets -->
	<target name="concat">

		<!-- concatenates all compressed JS files into one -->
		<concat destfile="${final_js}" force="true" fixlastline="true">
			<fileset dir="${temp.dir}" includes="**/*.js" />
		</concat>

		<!-- concatenates all compressed CSS files into one -->
		<concat destfile="${final_css}" force="true" fixlastline="true">
			<fileset dir="${temp.dir}" includes="**/*.css" />
		</concat>

	</target>

	<target name="compress-js">

		<!-- compresses each JavaScript and CSS file -->
		<!-- and saved as {original_name}-min.{extension} -->
		<yui-compressor warn="false" munge="true" preserveallsemicolons="false" fromdir="${project.web.dir}/view/static/js" todir="${temp.dir}"/>

	</target>

	<target name="compress-css">

		<!-- compresses each JavaScript and CSS file -->
		<!-- and saved as {original_name}-min.{extension} -->
		<yui-compressor warn="false" munge="true" preserveallsemicolons="false" fromdir="${project.web.dir}/view/static/css" todir="${temp.dir}" />

	</target>

	<!-- deletes the temporary directory and all its contents -->
	<target name="temp-clean">
		<delete dir="${temp.dir}" />
	</target>

	<!-- creates the temporary directory -->
	<target name="comp-start">
		<mkdir dir="${temp.dir}" />
		<delete file="${final_js}" />
		<delete file="${final_css}" />
	</target>

	<target name="compress" depends="comp-start,compress-js,compress-css,concat,temp-clean" />

</project>
