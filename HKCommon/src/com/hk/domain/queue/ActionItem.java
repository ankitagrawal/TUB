package com.hk.domain.queue;
// Generated 15-Apr-2013 01:46:24 by Hibernate Tools 3.2.4.CR1


import com.akube.framework.gson.JsonSkip;
import com.hk.domain.order.ShippingOrder;
import com.hk.domain.user.User;

import javax.persistence.*;
import java.util.*;

/**
 * ActionQueue generated by hbm2java
 */
@Entity
@Table(name = "action_item")
public class ActionItem implements java.io.Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id", unique = true, nullable = false)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "current_action_task_id")
    private ActionTask currentActionTask;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "previous_action_task_id")
    private ActionTask previousActionTask;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "traffic_state_id")
    private TrafficState trafficState;

    @JoinColumn(name = "shipping_order_id", nullable = false)
    @OneToOne(fetch = FetchType.LAZY)
    private ShippingOrder shippingOrder;

    @JsonSkip
    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinTable(name = "action_item_buckets", uniqueConstraints = @UniqueConstraint(columnNames = {"action_item_id", "bucket_id"}), joinColumns = {@JoinColumn(name = "action_item_id", nullable = false, updatable = false)}, inverseJoinColumns = {@JoinColumn(name = "bucket_id", nullable = false, updatable = false)})
    private List<Bucket> buckets = new ArrayList<Bucket>(0);

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "reporter", nullable = false)
    private User reporter;

    @Column(name = "flagged")
    private boolean flagged;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "first_push_date", length = 19)
    private Date firstPushDate;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "last_push_date", length = 19)
    private Date lastPushDate;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "pop_date", length = 19)
    private Date popDate;

    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinTable(name = "watcher", uniqueConstraints = @UniqueConstraint(columnNames = {"action_item_id", "user_id"}), joinColumns = {@JoinColumn(name = "action_item_id", nullable = false, updatable = false)}, inverseJoinColumns = {@JoinColumn(name = "user_id", nullable = false, updatable = false)})
    private List<User> watchers = new ArrayList<User>(0);

    public Long getId() {
        return this.id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public ActionTask getCurrentActionTask() {
        return currentActionTask;
    }

    public void setCurrentActionTask(ActionTask currentActionTask) {
        this.currentActionTask = currentActionTask;
    }

    public ActionTask getPreviousActionTask() {
        return previousActionTask;
    }

    public void setPreviousActionTask(ActionTask previousActionTask) {
        this.previousActionTask = previousActionTask;
    }

    public TrafficState getTrafficState() {
        return this.trafficState;
    }

    public void setTrafficState(TrafficState trafficState) {
        this.trafficState = trafficState;
    }

    public ShippingOrder getShippingOrder() {
        return shippingOrder;
    }

    public void setShippingOrder(ShippingOrder shippingOrder) {
        this.shippingOrder = shippingOrder;
    }

    public User getReporter() {
        return reporter;
    }

    public void setReporter(User reporter) {
        this.reporter = reporter;
    }

    public boolean isFlagged() {
        return flagged;
    }

    public void setFlagged(boolean flagged) {
        this.flagged = flagged;
    }

    public Date getFirstPushDate() {
        return this.firstPushDate;
    }

    public void setFirstPushDate(Date firstPushDate) {
        this.firstPushDate = firstPushDate;
    }

    public Date getLastPushDate() {
        return this.lastPushDate;
    }

    public void setLastPushDate(Date lastPushDate) {
        this.lastPushDate = lastPushDate;
    }

    public List<Bucket> getBuckets() {
        return buckets;
    }

    public void setBuckets(List<Bucket> buckets) {
        this.buckets = buckets;
    }

    public Date getPopDate() {
        return popDate;
    }

    public void setPopDate(Date popDate) {
        this.popDate = popDate;
    }

    public List<User> getWatchers() {
        return watchers;
    }

    public void setWatchers(List<User> watchers) {
        this.watchers = watchers;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        ActionItem that = (ActionItem) o;

        if (!id.equals(that.id)) return false;

        return true;
    }

    @Override
    public int hashCode() {
        return id.hashCode();
    }
}


